<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2016 Bengt Martensson

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<exportformats:exportformat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                            xmlns:exportformats="http://www.harctoolbox.org/exportformats"
                            xsi:schemaLocation="http://www.harctoolbox.org/exportformats http://www.harctoolbox.org/schemas/exportformats.xsd"
                            name="Arduino Raw" extension="ino" multiSignal="true" simpleSequence="false">
<!-- Limitations:supports only one remote (ignores all but the first one),
     Does not support ending sequences (ignores them).
    -->
<xsl:stylesheet xmlns:girr="http://www.harctoolbox.org/Girr"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:java="http://xml.apache.org/xalan/java"
                xmlns:cidentifierfactory="http://xml.apache.org/xalan/java/org.harctoolbox.irscrutinizer.exporter.CIdentifierFactory"
                version="1.0">
    <xsl:output method="text" />
    <xsl:variable name="cIdentifierFactory" select="cidentifierfactory:new()"/>

    <xsl:template match="/girr:remotes">
        <xsl:text><![CDATA[// This Arduino sketch was automatically generated by IrScrutinizer.

// It supports:
//
// * IRremote https://github.com/z3t0/Arduino-IRremote
//            http://z3t0.github.io/Arduino-IRremote/
// * IRLib    https://github.com/cyborg5/IRLib
// * Infrared4Arduino https://github.com/bengtmartensson/Infrared4Arduino,
//                    http://www.harctoolbox.org/Infrared4Arduino.html

// For problems, bugs, and suggestions, please open an issue at
// https://github.com/bengtmartensson/IrScrutinizer/issues

// This file contains C identifiers which have been translated from command names.
// Under some circumstances, these may clash with predefined variables.

// Define exactly one of these
// #define IRREMOTE
// #define IRLIB
#define INFRARED4ARDUINO

/////////////////////////////////////////////////////
// Sanity check
#if defined(IRREMOTE) + defined(IRLIB) + defined(INFRARED4ARDUINO) != 1
#error Must define exactly only one of IRREMOTE, IRLIB, or INFRARED4ARDUINO
#endif

#ifdef IRREMOTE
#include <IRremote.h>
#elif defined(IRLIB)
#include <IRLib.h>
#define sendRaw send
#elif defined(INFRARED4ARDUINO)
#include <IrSenderPwm.h>
#else
#error Must defined one of IRREMOTE, IRLIB, or INFRARED4ARDUINO
#endif

#if defined(IRREMOTE) | defined(IRLIB)
typedef uint16_t microseconds_t; // Change if desired
typedef uint16_t frequency_t;    // Change if desired

static inline unsigned hz2khz(frequency_t f) { return f/1000U; }

// IRremote and IRLib does not have HAS_FLASH_READ or similar.
// As a first guess, use defined(ARDUINO_ARCH_AVR).
// Change if desired.
#define HAS_FLASH_READ defined(ARDUINO_ARCH_AVR)
#endif

// Infrared4Arduino already defines HAS_FLASH_READ, architecture dependant.
// Feel free to override if you think that is a good idea.

#if ! HAS_FLASH_READ
#define PROGMEM /* nothing */
#endif

// Constants
static const long BAUD = 115200UL; // Change if desired

// Global variables
#ifdef IRREMOTE
IRsend irsend;
#elif defined(IRLIB)
IRsendRaw irsend;
#else
IrSender *irsend = IrSenderPwm::getInstance(true);
#endif


]]></xsl:text>
<xsl:apply-templates select="girr:remote[1]//girr:command" mode="definition"/>

<xsl:text><![CDATA[
static void sendRaw
#if HAS_FLASH_READ
(const microseconds_t intro_P[], size_t lengthIntro, const microseconds_t repeat_P[],
             size_t lengthRepeat, frequency_t frequency, unsigned times) {
    microseconds_t intro[lengthIntro];
    microseconds_t repeat[lengthRepeat];
    memcpy_PF(intro, (uint_farptr_t) intro_P, sizeof(microseconds_t) * lengthIntro);
    memcpy_PF(repeat, (uint_farptr_t) repeat_P, sizeof(microseconds_t) * lengthRepeat);
#else // ! HAS_FLASH_READ
(const microseconds_t intro[], size_t lengthIntro, const microseconds_t repeat[],
             size_t lengthRepeat, frequency_t frequency, unsigned times) {
#endif // ! HAS_FLASH_READ

#if defined(IRREMOTE) | defined(IRLIB)
    if (lengthIntro > 0U)
        irsend.sendRaw(intro, lengthIntro, hz2khz(frequency));
    if (lengthRepeat > 0U)
        for (unsigned i = 0U; i < times - (lengthIntro > 0U); i++)
            irsend.sendRaw(repeat, lengthRepeat, hz2khz(frequency));
#else // INFRARED4ARDUINO
    IrSignal irSignal(intro, lengthIntro, repeat, lengthRepeat, NULL, 0U, frequency);
    irsend->sendIrSignal(irSignal, times);
#endif
}

void setup() {
    Serial.begin(BAUD);
    Serial.setTimeout(60000UL);
}

// A pretty silly main loop; just intended as an example.
void loop() {
    Serial.println(F("Enter number of signal to send (1 .. ]]></xsl:text>
    <xsl:value-of select="count(//girr:remote[1]//girr:command)"/>
    <xsl:text>)"));
    long commandno = Serial.parseInt();
    Serial.println(F("Enter number of times to send it"));
    long times = Serial.parseInt();
    switch (commandno) {
</xsl:text>
        <xsl:apply-templates select="//girr:remote[1]" mode="using"/>
        <xsl:text>    default:
        Serial.println(F("Invalid number entered, try again"));
        break;
    }
}
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:remote" mode="using">
        <xsl:apply-templates select="//girr:command" mode="using"/>
    </xsl:template>

    <xsl:template match="girr:command" mode="definition">
        <xsl:text>// Command #</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>: </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>
</xsl:text>
        <xsl:apply-templates select="girr:parameters"/>
        <xsl:apply-templates select="girr:raw[1]" mode="definition"/>
        <!--xsl:apply-templates select="girr:ccf"/-->
        <xsl:text>
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:parameters">
        <xsl:text>// Protocol: </xsl:text>
        <xsl:value-of select="@protocol"/>
        <xsl:text>, Parameters:</xsl:text>
        <xsl:apply-templates select="girr:parameter"/>
        <xsl:text>
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:parameter">
        <xsl:text> </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>=</xsl:text>
        <xsl:value-of select="@value"/>
    </xsl:template>

    <xsl:template match="girr:raw" mode="definition">
        <xsl:apply-templates select="*" mode="definition"/>
    </xsl:template>

    <xsl:template match="girr:intro|girr:repeat" mode="definition">
        <xsl:text>const microseconds_t </xsl:text>
        <xsl:value-of select="name(.)"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="cidentifierfactory:mkCIdentifier($cIdentifierFactory,
                                                               string(../../@name),
                                                               count(../../preceding-sibling::girr:command))"/>
        <xsl:text>[] PROGMEM = { </xsl:text>
        <xsl:apply-templates select="*"/>
        <xsl:text> };
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:flash">
        <xsl:value-of select="."/>
        <xsl:text>U, </xsl:text>
    </xsl:template>
    <xsl:template match="girr:gap">
        <xsl:value-of select="."/>
        <xsl:text>U, </xsl:text>
    </xsl:template>
    <xsl:template match="girr:gap[position()=last()]">
        <xsl:if test=". &gt; 65535">
            <xsl:text>65535U</xsl:text>
        </xsl:if>
        <xsl:if test=". &lt;= 65535">
            <xsl:value-of select="."/>
        </xsl:if>
    </xsl:template>

    <xsl:template match="girr:command" mode="using">
        <xsl:text>    case </xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>U:
</xsl:text>
    <xsl:text>        sendRaw(</xsl:text>
        <xsl:apply-templates select="girr:raw[1]" mode="arg"/>
        <xsl:value-of select="girr:raw[1]/@frequency"/>
        <xsl:text>U, times);
        break;
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:raw" mode="arg">
        <xsl:if test="not(girr:intro)">
            <xsl:text>NULL, 0U, </xsl:text>
        </xsl:if>
        <xsl:apply-templates select="*" mode="arg"/>
        <xsl:if test="not(girr:repeat)">
            <xsl:text>NULL, 0U, </xsl:text>
        </xsl:if>
    </xsl:template>

    <xsl:template match="girr:intro|girr:repeat" mode="arg">
        <xsl:value-of select="name(.)"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="cidentifierfactory:mkCIdentifier($cIdentifierFactory,
                                                                string(../../@name),
                                                                count(../../preceding-sibling::girr:command))"/>
        <xsl:text>, </xsl:text>
        <xsl:value-of select="count(*)"/>
        <xsl:text>U, </xsl:text>
    </xsl:template>

    <!-- just to be on the safe side -->
    <xsl:template match="girr:ending">
        <xsl:comment>Warning: ending sequence in command <xsl:value-of select="../../@name"/> was ignored.</xsl:comment>
    </xsl:template>

</xsl:stylesheet>
</exportformats:exportformat>