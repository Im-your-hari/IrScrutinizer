<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2017 Bengt Martensson

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<exportformats:exportformat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                            xmlns:exportformats="http://www.harctoolbox.org/exportformats"
                            xsi:schemaLocation="http://www.harctoolbox.org/exportformats http://www.harctoolbox.org/schemas/exportformats.xsd"
                            name="Broadlink Python IR" extension="py" multiSignal="true" simpleSequence="false">
<!-- Limitations: just takes all commands, ignoring its enclosing remotes and command sets. -->
<xsl:stylesheet xmlns:girr="http://www.harctoolbox.org/Girr"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:java="http://xml.apache.org/xalan/java"
                xmlns:cidentifierfactory="http://xml.apache.org/xalan/java/org.harctoolbox.irscrutinizer.exporter.CIdentifierFactory"
                version="1.0">
    <xsl:output method="text" />
    <xsl:template match="/girr:remotes">
        <xsl:text><![CDATA[#! /usr/bin/env python

# This file has been automatically generated by IrScrutinizer.

# For problems, bugs, and suggestions, please open an issue at
# https://github.com/bengtmartensson/harctoolboxbundle/issues

import argparse
import broadlink

IR_TOKEN = 0x26
RF_433_TOKEN = 0xB2
RF_315_TOKEN = 0xD7

commands = {
]]></xsl:text>
<xsl:apply-templates select="girr:remote//girr:command"/>
<xsl:text><![CDATA[}


def get_command_data(command_name, count):
    cmd = commands[command_name]
    buffer = bytearray()
    buffer.append(cmd[0])
    repeat_only = len(cmd[1]) == 0 and len(cmd[3]) == 0
    buffer.append(count - 1 if repeat_only else 0)
    seq = cmd[2] if repeat_only else mk_sequence(cmd, count)
    buffer.append(len(seq) % 256)
    buffer.append(len(seq) / 256)
    return buffer + seq


def mk_sequence(cmd, count):
    no_repeats = count if len(cmd[1]) == 0 else count - 1
    data = cmd[1]
    for i in range(0, no_repeats):
        data = data + cmd[2]
    return data + cmd[3]


def auto_int(x):
    return int(x, 0)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(fromfile_prefix_chars='@')
    parser.add_argument("--device", help="device definition as 'type host mac'")
    parser.add_argument("--type", type=auto_int, default=0x2712, help="type of device")
    parser.add_argument("--host", help="host address")
    parser.add_argument("--mac", help="mac address (hex reverse), as used by python-broadlink library")
    parser.add_argument("--count", default=1, type=int, help="Number of times to send signal")
    parser.add_argument("command", help="Name of command to send, as defined in the code")
    args = parser.parse_args()

    if args.device:
        values = args.device.split()
        type = int(values[0], 0)
        host = values[1]
        mac = bytearray.fromhex(values[2])
    else:
        type = args.type
        host = args.host
        mac = bytearray.fromhex(args.mac)

    dev = broadlink.gendevice(type, (host, 80), mac)
    dev.auth()
    payload = get_command_data(args.command, args.count)
    dev.send_data(payload)
]]></xsl:text>
    </xsl:template>

    <xsl:template match="girr:command">
        <xsl:text>    # Command #</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>: </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>; </xsl:text>
        <xsl:apply-templates select="girr:parameters"/>
        <xsl:text>
</xsl:text>
        <xsl:apply-templates select="girr:raw[1]"/>
    </xsl:template>

    <xsl:template match="girr:parameters">
        <xsl:text>Protocol: </xsl:text>
        <xsl:value-of select="@protocol"/>
        <xsl:text>, Parameters:</xsl:text>
        <xsl:apply-templates select="girr:parameter"/>
    </xsl:template>

    <xsl:template match="girr:parameter">
        <xsl:text> </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>=</xsl:text>
        <xsl:value-of select="@value"/>
    </xsl:template>

    <xsl:template match="girr:raw">
        <xsl:text>    &apos;</xsl:text>
        <xsl:value-of select="../@name"/>
        <xsl:text>&apos;: [
        IR_TOKEN,
</xsl:text>
        <xsl:apply-templates select="girr:intro"/>
        <xsl:if test="not(girr:intro)">
            <xsl:text>        bytearray(),
</xsl:text>
        </xsl:if>
        <xsl:apply-templates select="girr:repeat"/>
        <xsl:if test="not(girr:repeat)">
            <xsl:text>        bytearray(),
</xsl:text>
        </xsl:if>
        <xsl:apply-templates select="girr:ending"/>
        <xsl:if test="not(girr:ending)">
            <xsl:text>        bytearray()
</xsl:text>
        </xsl:if>
            <xsl:text>    ],
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:intro|girr:repeat|girr:ending">
        <xsl:text>        bytearray.fromhex(&apos;</xsl:text>
        <!--xsl:text>26004800</xsl:text-->
        <xsl:apply-templates select="*"/>
        <xsl:text>&apos;),
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:flash|girr:gap">
        <xsl:call-template name="broadlink-number">
            <xsl:with-param name="value" select="round(number(.) div 32.84)"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:template name="broadlink-number">
        <xsl:param name="value"/>
        <xsl:if test="$value &gt; 255">
            <xsl:text>00</xsl:text>
            <xsl:call-template name="broadlink-number">
                <xsl:with-param name="value" select="floor($value div 256)"/>
            </xsl:call-template>
        </xsl:if>
        <xsl:call-template name="two-hex-digits">
            <xsl:with-param name="value" select="$value mod 256"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:template name="two-hex-digits">
        <xsl:param name="value"/>
        <xsl:call-template name="hex-digit">
            <xsl:with-param name="value" select="floor($value div 16)"/>
        </xsl:call-template>
        <xsl:call-template name="hex-digit">
            <xsl:with-param name="value" select="$value mod 16"/>
        </xsl:call-template>
    </xsl:template>

    <xsl:variable name="hex-chars">0123456789ABCDEF</xsl:variable>

    <xsl:template name="hex-digit">
        <xsl:param name="value"/>
        <xsl:value-of select="substring($hex-chars, $value + 1, 1)"/>
    </xsl:template>

</xsl:stylesheet>
</exportformats:exportformat>