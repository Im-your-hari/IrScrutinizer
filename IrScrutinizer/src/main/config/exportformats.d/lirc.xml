<?xml version="1.0" encoding="UTF-8"?>
<!--
            This file has been automatically generated by IrpTransmogrifier,
            using its protocol data base, and the transformation file lirc.xsl.

            Command- and remote names are required just to consist of
            non-whitespace characters. We therefore use translate(*, ' ', '_')
            instead of something more elaborate.
-->
<exportformats:exportformat xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                            xmlns:exportformats="http://www.harctoolbox.org/exportformats"
                            xmlns:harctoolbox="http://www.harctoolbox.org"
                            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                            name="Lirc"
                            extension="lircd.conf"
                            multiSignal="true"
                            simpleSequence="false"
                            metadata="true"
                            xsi:schemaLocation="http://www.harctoolbox.org/exportformats http://www.harctoolbox.org/schemas/exportformats.xsd">
   <xsl:stylesheet xmlns:girr="http://www.harctoolbox.org/Girr"
                   xmlns:exporterutils="http://xml.apache.org/xalan/java/org.harctoolbox.irscrutinizer.exporter.ExporterUtils"
                   version="1.0">
      <xsl:output method="text"/>
      <xsl:template match="/girr:remotes">
         <xsl:text xml:space="preserve"># </xsl:text>
         <xsl:value-of select="@title"/>
         <xsl:text>
#
# Creating tool: </xsl:text>
         <xsl:value-of select="$creatingTool"/>
         <xsl:text>
# Creating user: </xsl:text>
         <xsl:value-of select="$creatingUser"/>
         <xsl:text>
# Creating date: </xsl:text>
         <xsl:value-of select="$creatingDate"/>
         <xsl:text>
# Encoding: </xsl:text>
         <xsl:value-of select="$encoding"/>
         <xsl:text>
#
</xsl:text>
         <xsl:apply-templates select="girr:remote"/>
      </xsl:template>
      <xsl:template match="girr:remote">
         <xsl:text># Manufacturer: </xsl:text>
         <xsl:value-of select="@manufacturer"/>
         <xsl:text>
# Model: </xsl:text>
         <xsl:value-of select="@model"/>
         <xsl:text>
# Displayname: </xsl:text>
         <xsl:value-of select="@displayName"/>
         <xsl:text>
# Remotename: </xsl:text>
         <xsl:value-of select="@remoteName"/>
         <xsl:text>
#
</xsl:text>
         <xsl:apply-templates select="girr:commandSet"/>
      </xsl:template>

      <!-- ################ Default protocol rule, raw codes ############## -->
      <xsl:template match="girr:commandSet">
         <xsl:text>begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	flags		RAW_CODES
	eps		30
	aeps		100
	frequency	</xsl:text>
         <xsl:value-of select="//girr:command[1]/girr:raw/@frequency"/>
         <xsl:text>
	gap		</xsl:text>
         <xsl:value-of select="//girr:command[1]/girr:raw/girr:repeat/girr:gap[position()=last()]"/>
         <xsl:text>
	begin raw_codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end raw_codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template match="girr:command">
         <xsl:text>		# </xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text xml:space="preserve"> not renderable, skipped
</xsl:text>
      </xsl:template>
      <xsl:template match="girr:command[raw]">
         <xsl:text>		name </xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text xml:space="preserve">
</xsl:text>
         <xsl:apply-templates select="girr:raw[1]"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <xsl:template match="girr:raw">
         <xsl:apply-templates select="girr:intro"/>
         <xsl:if test="not(girr:intro)">
            <xsl:apply-templates select="girr:repeat"/>
         </xsl:if>
      </xsl:template>
      <xsl:template match="girr:intro|girr:repeat">
         <xsl:text xml:space="preserve">			</xsl:text>
         <xsl:apply-templates select="*"/>
      </xsl:template>
      <xsl:template match="girr:flash">
         <xsl:value-of select="."/>
         <xsl:text xml:space="preserve"> </xsl:text>
      </xsl:template>
      <xsl:template match="girr:gap">
         <xsl:value-of select="."/>
         <xsl:text xml:space="preserve"> </xsl:text>
      </xsl:template>
      <xsl:template match="girr:gap[position() mod 4 = 0]">
         <xsl:value-of select="."/>
         <xsl:text xml:space="preserve">
			</xsl:text>
      </xsl:template>
      <xsl:template match="girr:gap[position()=last()]"/>

      <!-- ################## Protocol 48-NEC1 ################ -->
      <!-- IRP: {38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,~F:8,E:8,~E:8,1,^108m,(16,-4,1,^108m)*)[D:0..255,S:0..255=255-D,F:0..255,E:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = '48-nec1']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: 48-NEC1
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		48
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	repeat		9024	2256
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-48-nec1">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0, false(), true(), $E, 8, 0, true(), true(), $E, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='48-nec1']">
         <xsl:call-template name="command-48-nec1">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='48-nec1' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-48-nec1">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol 48-NEC2 ################ -->
      <!-- IRP: {38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,~F:8,E:8,~E:8,1,^108m)*[D:0..255,S:0..255=255-D,F:0..255,E:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = '48-nec2']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: 48-NEC2
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		48
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-48-nec2">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0, false(), true(), $E, 8, 0, true(), true(), $E, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='48-nec2']">
         <xsl:call-template name="command-48-nec2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='48-nec2' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-48-nec2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol AdNotam ################ -->
      <!-- IRP: {35.7k,895,msb}<1,-1|-1,1>(1,-2,1,D:6,F:6,^114m)*[D:0..63,F:0..63] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'adnotam']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: AdNotam
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		12
	flags		RC5|CONST_LENGTH
	eps		30
	aeps		100
	zero		895	895
	one		895	895
	header		895	1790
	plead		895
	gap		114000
	frequency	35700
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-adnotam">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 6, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='adnotam']">
         <xsl:call-template name="command-adnotam">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Aiwa ################ -->
      <!-- IRP: {38k,550}<1,-1|1,-3>(16,-8,D:8,S:5,~D:8,~S:5,F:8,~F:8,1,-42,(16,-8,1,-165)*)[D:0..255,S:0..31,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'aiwa']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Aiwa
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		42
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		550	550
	one		550	1650
	header		8800	4400
	ptrail		550
	repeat		8800	4400
	gap		23100
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-aiwa">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 5, 0, true(), true(), $D, 8, 0, true(), true(), $S, 5, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='aiwa']">
         <xsl:call-template name="command-aiwa">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Akai ################ -->
      <!-- IRP: {38k,289}<1,-2.6|1,-6.3>(D:3,F:7,1,^25.3m)*[D:0..7,F:0..127] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'akai']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Akai
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		10
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		289	751
	one		289	1821
	ptrail		289
	gap		25300
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-akai">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 3, 0, false(), true(), $F, 7, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='akai']">
         <xsl:call-template name="command-akai">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol Amino-56 omitted: Definitions not yet implemented -->
      <!-- Protocol Amino omitted: Definitions not yet implemented -->
      <!-- Protocol Anthem omitted: Definitions not yet implemented -->
      <!-- Protocol Apple omitted: Definitions not yet implemented -->

      <!-- ################## Protocol Archer ################ -->
      <!-- IRP: {0k,12}<1,-3.3m|1,-4.7m>(F:5,1,-9.7m)*[F:0..31] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'archer']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Archer
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		5
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		12	3300
	one		12	4700
	ptrail		12
	gap		9700
	frequency	0
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-archer">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 5, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='archer']">
         <xsl:call-template name="command-archer">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Audiovox ################ -->
      <!-- IRP: {40k,500}<1,-1|1,-3>(16,-8,D:8,1,-8,F:8,1,-40)*[D:0..255,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'audiovox']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Audiovox
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		16
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		500	500
	one		500	1500
	header		8000	4000
	ptrail		500
	gap		20000
	frequency	40000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-audiovox">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='audiovox']">
         <xsl:call-template name="command-audiovox">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Barco ################ -->
      <!-- IRP: {0k,10}<1,-5|1,-15>(1,-25,D:5,F:6,1,-25,1,-120m)*[D:0..31,F:0..63] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'barco']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Barco
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		11
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		10	50
	one		10	150
	header		10	250
	ptrail		10
	gap		120000
	frequency	0
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-barco">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 5, 0, false(), true(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='barco']">
         <xsl:call-template name="command-barco">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Blaupunkt ################ -->
      <!-- IRP: {30.3k,528}<-1,1|1,-1>(1,-5,1023:10,-39,1,-5,1:1,F:6,D:3,-230)[F:0..63,D:0..7] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'blaupunkt']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Blaupunkt
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		20
	flags		RC5
	eps		30
	aeps		100
	zero		528	528
	one		528	528
	header		528	2640
	ptrail		528
	gap		121440
	frequency	30300
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-blaupunkt">
         <xsl:param name="F"/>
         <xsl:param name="D"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), 1023, 10, 0, false(), true(), 1, 1, 0, false(), true(), $F, 6, 0, false(), true(), $D, 3, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='blaupunkt']">
         <xsl:call-template name="command-blaupunkt">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Bose ################ -->
      <!-- IRP: {38.0k,500,msb}<1,-1|1,-3>(2,-3,F:8,~F:8,1,-50m)*[F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'bose']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Bose
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		16
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		500	500
	one		500	1500
	header		1000	1500
	ptrail		500
	gap		50000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-bose">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $F, 8, 0, true(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='bose']">
         <xsl:call-template name="command-bose">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Bryston ################ -->
      <!-- IRP: {38.0k,315}<1,-6|6,-1>(D:10,F:8,-18m)*[D:0..1023,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'bryston']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Bryston
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		18
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		315	1890
	one		1890	315
	gap		18000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-bryston">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 10, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='bryston']">
         <xsl:call-template name="command-bryston">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol CanalSat omitted: Assignment cannot be done in the Lirc framework -->
      <!-- Protocol CanalSatLD omitted: Assignment cannot be done in the Lirc framework -->

      <!-- ################## Protocol Denon ################ -->
      <!-- IRP: {38k,264}<1,-3|1,-7>(D:5,F:8,0:2,1,-165,D:5,~F:8,3:2,1,-165)*[D:0..31,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'denon']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Denon
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		30
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		264	792
	one		264	1848
	ptrail		264
	gap		43560
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-denon">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 5, 0, false(), true(), $F, 8, 0, false(), true(), 0, 2, 0, false(), true(), $D, 5, 0, true(), true(), $F, 8, 0, false(), true(), 3, 2, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='denon']">
         <xsl:call-template name="command-denon">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol Denon-K omitted: Expressions as bitfields not implemented yet -->

      <!-- ################## Protocol Dgtec ################ -->
      <!-- IRP: {38k,560}<1,-1|1,-3>(16,-8,D:8,F:8,~F:8,1,^108m,(16,-4,1,^108m)+)[D:0..255,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'dgtec']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Dgtec
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		24
	flags		SPACE_ENC|CONST_LENGTH|CONST_LENGTH
	eps		30
	aeps		100
	zero		560	560
	one		560	1680
	header		8960	4480
	ptrail		560
	repeat		8960	2240
	gap		108000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-dgtec">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='dgtec']">
         <xsl:call-template name="command-dgtec">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol DirecTV omitted: Definitions not yet implemented -->

      <!-- ################## Protocol Dishplayer ################ -->
      <!-- IRP: {38.4k,535,msb}<1,-5|1,-3>(1,-11,(F:6,S:5,D:2,1,-11)+)[F:0..63,S:0..31,D:0..3] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'dishplayer']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Dishplayer
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		13
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		535	2675
	one		535	1605
	header		535	5885
	ptrail		535
	gap		5885
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-dishplayer">
         <xsl:param name="F"/>
         <xsl:param name="S"/>
         <xsl:param name="D"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $F, 6, 0, false(), false(), $S, 5, 0, false(), false(), $D, 2, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='dishplayer']">
         <xsl:call-template name="command-dishplayer">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Dish_Network ################ -->
      <!-- IRP: {57.6k,406}<1,-7|1,-4>(1,-15,(F:-6,S:5,D:5,1,-15)+)[F:0..63,S:0..31,D:0..31] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'dish_network']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Dish_Network
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		16
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		406	2842
	one		406	1624
	header		406	6090
	ptrail		406
	gap		6090
	frequency	57600
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-dish_network">
         <xsl:param name="F"/>
         <xsl:param name="S"/>
         <xsl:param name="D"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $F, 6, 0, false(), true(), $S, 5, 0, false(), true(), $D, 5, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='dish_network']">
         <xsl:call-template name="command-dish_network">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Elan ################ -->
      <!-- IRP: {40.2k,398,msb}<1,-1|1,-2>(3,-2,D:8,~D:8,2,-2,F:8,~F:8,1,^50m)*[D:0..255,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'elan']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Elan
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		398	398
	one		398	796
	header		1194	796
	ptrail		398
	gap		50000
	frequency	40200
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-elan">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 8, 0, true(), false(), $D, 8, 0, false(), false(), $F, 8, 0, true(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='elan']">
         <xsl:call-template name="command-elan">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Emerson ################ -->
      <!-- IRP: {36.7k,872}<1,-1|1,-3>(4,-4,D:6,F:6,~D:6,~F:6,1,-39)*[D:0..63,F:0..63] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'emerson']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Emerson
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		872	872
	one		872	2616
	header		3488	3488
	ptrail		872
	gap		34008
	frequency	36700
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-emerson">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 6, 0, false(), true(), $F, 6, 0, true(), true(), $D, 6, 0, true(), true(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='emerson']">
         <xsl:call-template name="command-emerson">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol F12 ################ -->
      <!-- IRP: {37.9k,422}<1,-3|3,-1>((D:3,S:1,F:8,-80)2,-128)*[D:0..7,S:0..1,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'f12']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: F12
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		422	1266
	one		1266	422
	gap		54016
	frequency	37900
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-f12">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 3, 0, false(), true(), $S, 1, 0, false(), true(), $F, 8, 0, false(), true(), $D, 3, 0, false(), true(), $S, 1, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='f12']">
         <xsl:call-template name="command-f12">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol F32 ################ -->
      <!-- IRP: {37.9k,422,msb}<1,-3|3,-1>(D:8,S:8,F:8,E:8,-100m)*[D:0..255,S:0..255,F:0..255,E:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'f32']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: F32
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		32
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		422	1266
	one		1266	422
	gap		100000
	frequency	37900
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-f32">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 8, 0, false(), false(), $S, 8, 0, false(), false(), $F, 8, 0, false(), false(), $E, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='f32']">
         <xsl:call-template name="command-f32">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Fujitsu ################ -->
      <!-- IRP: {37k,432}<1,-1|1,-3>(8,-4,20:8,99:8,0:4,E:4,D:8,S:8,F:8,1,-110)*[D:0..255,S:0..255=D,F:0..255,E:0..15=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'fujitsu']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Fujitsu
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		48
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		432	432
	one		432	1296
	header		3456	1728
	ptrail		432
	gap		47520
	frequency	37000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-fujitsu">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), 20, 8, 0, false(), true(), 99, 8, 0, false(), true(), 0, 4, 0, false(), true(), $E, 4, 0, false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='fujitsu']">
         <xsl:call-template name="command-fujitsu">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='fujitsu' and girr:parameters/girr:parameter[@name='S'] and girr:parameters/girr:parameter[@name='E']]">
         <xsl:call-template name="command-fujitsu">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Fujitsu-56 ################ -->
      <!-- IRP: {37k,432}<1,-1|1,-3>(8,-4,20:8,99:8,0:4,E:4,D:8,S:8,X:8,F:8,1,-110)*[D:0..255,S:0..255=D,F:0..255,E:0..15=0,X:0..255=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'fujitsu-56']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Fujitsu-56
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		56
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		432	432
	one		432	1296
	header		3456	1728
	ptrail		432
	gap		47520
	frequency	37000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-fujitsu-56">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:param name="X"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), 20, 8, 0, false(), true(), 99, 8, 0, false(), true(), 0, 4, 0, false(), true(), $E, 4, 0, false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $X, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='fujitsu-56']">
         <xsl:call-template name="command-fujitsu-56">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E" select="0"/>
            <xsl:with-param name="X" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='fujitsu-56' and girr:parameters/girr:parameter[@name='S'] and girr:parameters/girr:parameter[@name='E'] and girr:parameters/girr:parameter[@name='X']]">
         <xsl:call-template name="command-fujitsu-56">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
            <xsl:with-param name="X"
                            select="number(girr:parameters/girr:parameter[@name='X']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol G.I.Cable omitted: Definitions not yet implemented -->
      <!-- Protocol G.I.4DTV omitted: Definitions not yet implemented -->

      <!-- ################## Protocol GI RG ################ -->
      <!-- IRP: {37.3k,1000,msb}<1,-1|1,-3>(5,-3,F:6,S:2,D:8,1,-60)*[D:0..255,S:0..3,F:0..63] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'gi rg']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: GI RG
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		16
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		1000	1000
	one		1000	3000
	header		5000	3000
	ptrail		1000
	gap		60000
	frequency	37300
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-gi-rg">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $F, 6, 0, false(), false(), $S, 2, 0, false(), false(), $D, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='gi rg']">
         <xsl:call-template name="command-gi-rg">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol Grundig16 omitted: not one of the simple types (pwm2, pwm4, biphase) -->
      <!-- Protocol Grundig16-30 omitted: not one of the simple types (pwm2, pwm4, biphase) -->
      <!-- Protocol GXB omitted: Definitions not yet implemented -->
      <!-- Protocol Humax 4Phase omitted: Assignment cannot be done in the Lirc framework -->
      <!-- Protocol IODATAn omitted: Definitions not yet implemented -->

      <!-- ################## Protocol Jerrold ################ -->
      <!-- IRP: {0k,44}<1,-7.5m|1,-11.5m>(F:5,1,-23.5m)*[F:0..31] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'jerrold']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Jerrold
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		5
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		44	7500
	one		44	11500
	ptrail		44
	gap		23500
	frequency	0
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-jerrold">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 5, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='jerrold']">
         <xsl:call-template name="command-jerrold">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol JVC ################ -->
      <!-- IRP: {38k,525}<1,-1|1,-3>(16,-8,(D:8,F:8,1,-45)+)[D:0..255,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'jvc']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: JVC
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		16
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		525	525
	one		525	1575
	header		8400	4200
	ptrail		525
	gap		23625
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-jvc">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='jvc']">
         <xsl:call-template name="command-jvc">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol JVC-48 omitted: Expressions as bitfields not implemented yet -->
      <!-- Protocol JVC-56 omitted: Expressions as bitfields not implemented yet -->
      <!-- Protocol Kaseikyo omitted: Definitions not yet implemented -->
      <!-- Protocol Kaseikyo56 omitted: Definitions not yet implemented -->

      <!-- ################## Protocol Kathrein ################ -->
      <!-- IRP: {38k,540}<1,-1|1,-3>(16,-8,D:4,~D:4,F:8,~F:8,1,^105m,(16,-8,F:8,1,^105m)+)[D:0..15,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'kathrein']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Kathrein
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		32
	flags		SPACE_ENC|CONST_LENGTH|CONST_LENGTH
	eps		30
	aeps		100
	zero		540	540
	one		540	1620
	header		8640	4320
	ptrail		540
	gap		105000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-kathrein">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 4, 0, true(), true(), $D, 4, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='kathrein']">
         <xsl:call-template name="command-kathrein">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Konka ################ -->
      <!-- IRP: {38k,500,msb}<1,-3|1,-5>(6,-6,D:8,F:8,1,-8,1,-46)*[D:0..255,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'konka']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Konka
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		16
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		500	1500
	one		500	2500
	header		3000	3000
	ptrail		500
	gap		23000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-konka">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 8, 0, false(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='konka']">
         <xsl:call-template name="command-konka">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Logitech ################ -->
      <!-- IRP: {38k,127}<3,-4|3,-8>(31,-36,D:4,~D:4,F:8,~F:8,3,-50m)*[D:0..15,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'logitech']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Logitech
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		381	508
	one		381	1016
	header		3937	4572
	ptrail		381
	gap		50000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-logitech">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 4, 0, true(), true(), $D, 4, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='logitech']">
         <xsl:call-template name="command-logitech">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol Lumagen omitted: Definitions not yet implemented -->

      <!-- ################## Protocol Matsui ################ -->
      <!-- IRP: {38k,525}<1,-1|1,-3>(D:3,F:7,1,^30.5m)*[D:0..7,F:0..127] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'matsui']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Matsui
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		10
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		525	525
	one		525	1575
	ptrail		525
	gap		30500
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-matsui">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 3, 0, false(), true(), $F, 7, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='matsui']">
         <xsl:call-template name="command-matsui">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol MCE omitted: Definitions not yet implemented -->

      <!-- ################## Protocol Metz19 ################ -->
      <!-- IRP: {37.9k,106,msb}<4,-9|4,-16>((8,-22,T:1,D:3,~D:3,F:6,~F:6,4,-125m)*,T=1-T)[D:0..7,F:0..63,T@:0..1=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'metz19']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Metz19
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		19
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		424	954
	one		424	1696
	header		848	2332
	ptrail		424
	gap		125000
	toggle_bit	1
	frequency	37900
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-metz19">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $T, 1, 0, false(), false(), $D, 3, 0, true(), false(), $D, 3, 0, false(), false(), $F, 6, 0, true(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='metz19']">
         <xsl:call-template name="command-metz19">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='metz19' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-metz19">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Mitsubishi ################ -->
      <!-- IRP: {32.6k,300}<1,-3|1,-7>(D:8,F:8,1,-80)*[D:0..127,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'mitsubishi']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Mitsubishi
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		16
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		300	900
	one		300	2100
	ptrail		300
	gap		24000
	frequency	32600
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-mitsubishi">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='mitsubishi']">
         <xsl:call-template name="command-mitsubishi">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol Mitsubishi-K omitted: Definitions not yet implemented -->

      <!-- ################## Protocol NEC1 ################ -->
      <!-- IRP: {38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,~F:8,1,^108m,(16,-4,1,^108m)*)[D:0..255,S:0..255=255-D,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'nec1']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: NEC1
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	repeat		9024	2256
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nec1">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='nec1']">
         <xsl:call-template name="command-nec1">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='nec1' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-nec1">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NEC1-rnc ################ -->
      <!-- IRP: {38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,~F:4:4,~F:4,1,^108m,(16,-4,1,^108m)*)[D:0..255,S:0..255=255-D,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'nec1-rnc']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: NEC1-rnc
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	repeat		9024	2256
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nec1-rnc">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 4, 4, true(), true(), $F, 4, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='nec1-rnc']">
         <xsl:call-template name="command-nec1-rnc">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='nec1-rnc' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-nec1-rnc">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NEC1-f16 ################ -->
      <!-- IRP: {38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:16,1,^108m,(16,-4,1,^108m)*)[D:0..255,S:0..255=255-D,F:0..65535] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'nec1-f16']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: NEC1-f16
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	repeat		9024	2256
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nec1-f16">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 16, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='nec1-f16']">
         <xsl:call-template name="command-nec1-f16">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='nec1-f16' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-nec1-f16">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NEC2 ################ -->
      <!-- IRP: {38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,~F:8,1,^108m)*[D:0..255,S:0..255=255-D,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'nec2']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: NEC2
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nec2">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='nec2']">
         <xsl:call-template name="command-nec2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='nec2' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-nec2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NECx1 ################ -->
      <!-- IRP: {38.4k,564}<1,-1|1,-3>(8,-8,D:8,S:8,F:8,~F:8,1,^108m,(8,-8,D:1,1,^108m)*)[D:0..255,S:0..255=255-D,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'necx1']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: NECx1
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		4512	4512
	ptrail		564
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-necx1">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='necx1']">
         <xsl:call-template name="command-necx1">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='necx1']">
         <xsl:call-template name="command-necx1">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='necx1' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-necx1">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NECx2 ################ -->
      <!-- IRP: {38.4k,564}<1,-1|1,-3>(8,-8,D:8,S:8,F:8,~F:8,1,^108m)*[D:0..255,S:0..255=255-D,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'necx2']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: NECx2
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		4512	4512
	ptrail		564
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-necx2">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='necx2']">
         <xsl:call-template name="command-necx2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='necx2' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-necx2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Nokia ################ -->
      <!-- IRP: {36k,1p,msb}<6,-10|6,-16|6,-22|6,-28>(15,-10,D:8,S:8,F:8,6,^100m)*[D:0..255,S:0..255,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'nokia']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Nokia
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		24
	flags		RCMM|CONST_LENGTH
	eps		30
	aeps		100
	zero		168	280
	one		168	448
	two		168	616
	three		168	784
	header		420	280
	ptrail		168
	gap		100000
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nokia">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 8, 0, false(), false(), $S, 8, 0, false(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='nokia']">
         <xsl:call-template name="command-nokia">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Nokia12 ################ -->
      <!-- IRP: {36k,1p,msb}<6,-10|6,-16|6,-22|6,-28>(15,-10,D:4,F:8,6,^100m)*[D:0..15,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'nokia12']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Nokia12
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		12
	flags		RCMM|CONST_LENGTH
	eps		30
	aeps		100
	zero		168	280
	one		168	448
	two		168	616
	three		168	784
	header		420	280
	ptrail		168
	gap		100000
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nokia12">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 4, 0, false(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='nokia12']">
         <xsl:call-template name="command-nokia12">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Nokia32 ################ -->
      <!-- IRP: {36k,1p,msb}<6,-10|6,-16|6,-22|6,-28>((15,-10,D:8,S:8,T:1,X:7,F:8,6,^100m)*,T=1-T)[D:0..255,S:0..255,F:0..255,T@:0..1=0,X:0..127] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'nokia32']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Nokia32
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		32
	flags		RCMM|CONST_LENGTH
	eps		30
	aeps		100
	zero		168	280
	one		168	448
	two		168	616
	three		168	784
	header		420	280
	ptrail		168
	gap		100000
	toggle_bit	17
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nokia32">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:param name="X"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 8, 0, false(), false(), $S, 8, 0, false(), false(), $T, 1, 0, false(), false(), $X, 7, 0, false(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='nokia32']">
         <xsl:call-template name="command-nokia32">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
            <xsl:with-param name="X"
                            select="number(girr:parameters/girr:parameter[@name='X']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='nokia32' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-nokia32">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
            <xsl:with-param name="X"
                            select="number(girr:parameters/girr:parameter[@name='X']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NRC16 ################ -->
      <!-- IRP: {38k,500}<-1,1|1,-1>(1,-5,1:1,254:8,127:7,-15m,(1,-5,1:1,F:8,D:7,-110m)+,1,-5,1:1,254:8,127:7,-15m)[D:0..127,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'nrc16']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text># Warning: Protocol contains ending that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: NRC16
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		32
	flags		RC5
	eps		30
	aeps		100
	zero		500	500
	one		500	500
	header		500	2500
	ptrail		500
	gap		110000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nrc16">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), 1, 1, 0, false(), true(), 254, 8, 0, false(), true(), 127, 7, 0, false(), true(), 1, 1, 0, false(), true(), $F, 8, 0, false(), true(), $D, 7, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='nrc16']">
         <xsl:call-template name="command-nrc16">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NRC16-32 ################ -->
      <!-- IRP: {32k,500}<-1,1|1,-1>(1,-5,1:1,254:8,127:7,-15m,(1,-5,1:1,F:8,D:7,-110m)+,1,-5,1:1,254:8,127:7,-15m)[D:0..127,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'nrc16-32']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text># Warning: Protocol contains ending that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: NRC16-32
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		32
	flags		RC5
	eps		30
	aeps		100
	zero		500	500
	one		500	500
	header		500	2500
	ptrail		500
	gap		110000
	frequency	32000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nrc16-32">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), 1, 1, 0, false(), true(), 254, 8, 0, false(), true(), 127, 7, 0, false(), true(), 1, 1, 0, false(), true(), $F, 8, 0, false(), true(), $D, 7, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='nrc16-32']">
         <xsl:call-template name="command-nrc16-32">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NRC17 ################ -->
      <!-- IRP: {500,38k,25%}<-1,1|1,-1>(1,-5,1:1,254:8,255:8,-28,(1,-5,1:1,F:8,D:8,-220)+,1,-5,1:1,254:8,255:8,-200)[D:0..255,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'nrc17']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text># Warning: Protocol contains ending that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: NRC17
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		34
	flags		RC5
	eps		30
	aeps		100
	zero		500	500
	one		500	500
	header		500	2500
	ptrail		500
	gap		110000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nrc17">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), 1, 1, 0, false(), true(), 254, 8, 0, false(), true(), 255, 8, 0, false(), true(), 1, 1, 0, false(), true(), $F, 8, 0, false(), true(), $D, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='nrc17']">
         <xsl:call-template name="command-nrc17">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol OrtekMCE omitted: Definitions not yet implemented -->

      <!-- ################## Protocol PaceMSS ################ -->
      <!-- IRP: {38k,630,msb}<1,-7|1,-11>(1,-5,1,-5,T:1,D:1,F:8,1,^120m)*[D:0..1,F:0..255,T:0..1] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'pacemss']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: PaceMSS
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		10
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		630	4410
	one		630	6930
	header		630	3150
	plead		630
	ptrail		630
	gap		120000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-pacemss">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $T, 1, 0, false(), false(), $D, 1, 0, false(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='pacemss']">
         <xsl:call-template name="command-pacemss">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol Panasonic omitted: Expressions as bitfields not implemented yet -->
      <!-- Protocol Panasonic2 omitted: Expressions as bitfields not implemented yet -->

      <!-- ################## Protocol Panasonic_Old ################ -->
      <!-- IRP: {57.6k,833}<1,-1|1,-3>(4,-4,D:5,F:6,~D:5,~F:6,1,-44m)*[D:0..31,F:0..63] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'panasonic_old']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Panasonic_Old
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		22
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		833	833
	one		833	2499
	header		3332	3332
	ptrail		833
	gap		44000
	frequency	57600
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-panasonic_old">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 5, 0, false(), true(), $F, 6, 0, true(), true(), $D, 5, 0, true(), true(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='panasonic_old']">
         <xsl:call-template name="command-panasonic_old">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol PCTV omitted: not one of the simple types (pwm2, pwm4, biphase) -->

      <!-- ################## Protocol pid-0001 ################ -->
      <!-- IRP: {0k,msb}<24,-9314|24,-13486>(24,-21148,(F:5,1,-28m)+)[F:0..31] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'pid-0001']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: pid-0001
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		5
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		24	9314
	one		24	13486
	header		24	21148
	ptrail		1
	gap		28000
	frequency	0
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-pid-0001">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $F, 5, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='pid-0001']">
         <xsl:call-template name="command-pid-0001">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol pid-0003 ################ -->
      <!-- IRP: {40.2k,389}<2,-2|3,-1>(F:8,~F:8,^102m)*[F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'pid-0003']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: pid-0003
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		16
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		778	778
	one		1167	389
	gap		102000
	frequency	40200
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-pid-0003">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='pid-0003']">
         <xsl:call-template name="command-pid-0003">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol pid-0004 ################ -->
      <!-- IRP: {0k,msb}<12,-130|12,-372>(F:6,12,-27m)*[F:0..63] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'pid-0004']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: pid-0004
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		6
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		12	130
	one		12	372
	ptrail		12
	gap		27000
	frequency	0
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-pid-0004">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='pid-0004']">
         <xsl:call-template name="command-pid-0004">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol pid-0083 omitted: not one of the simple types (pwm2, pwm4, biphase) -->

      <!-- ################## Protocol Pioneer ################ -->
      <!-- IRP: {40k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,~F:8,1,^108m)*[D:0..255,S:0..255=255-D,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'pioneer']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Pioneer
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		108000
	frequency	40000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-pioneer">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='pioneer']">
         <xsl:call-template name="command-pioneer">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='pioneer' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-pioneer">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Proton ################ -->
      <!-- IRP: {38.5k,500}<1,-1|1,-3>(16,-8,D:8,1,-8,F:8,1,^63m)*[D:0..255,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'proton']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Proton
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		16
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		500	500
	one		500	1500
	header		8000	4000
	ptrail		500
	gap		63000
	frequency	38500
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-proton">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='proton']">
         <xsl:call-template name="command-proton">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Proton-40 ################ -->
      <!-- IRP: {40.5k,500}<1,-1|1,-3>(16,-8,D:8,1,-8,F:8,1,^63m)*[D:0..255,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'proton-40']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Proton-40
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		16
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		500	500
	one		500	1500
	header		8000	4000
	ptrail		500
	gap		63000
	frequency	40500
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-proton-40">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='proton-40']">
         <xsl:call-template name="command-proton-40">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RC5 ################ -->
      <!-- IRP: {36k,msb,889}<1,-1|-1,1>((1,~F:1:6,T:1,D:5,F:6,^114m)*,T=1-T)[D:0..31,F:0..127,T@:0..1=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'rc5']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: RC5
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		13
	flags		RC5|CONST_LENGTH
	eps		30
	aeps		100
	zero		889	889
	one		889	889
	plead		889
	gap		114000
	toggle_bit	2
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rc5">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(true(), false(), $F, 1, 6, false(), false(), $T, 1, 0, false(), false(), $D, 5, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rc5']">
         <xsl:call-template name="command-rc5">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rc5' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-rc5">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RC5-7F ################ -->
      <!-- IRP: {36k,msb,889}<1,-1|-1,1>((1,~D:1:5,T:1,D:5,F:7,^114m)*,T=1-T)[D:0..63,F:0..127,T@:0..1=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'rc5-7f']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: RC5-7F
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		14
	flags		RC5|CONST_LENGTH
	eps		30
	aeps		100
	zero		889	889
	one		889	889
	plead		889
	gap		114000
	toggle_bit	2
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rc5-7f">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(true(), false(), $D, 1, 5, false(), false(), $T, 1, 0, false(), false(), $D, 5, 0, false(), false(), $F, 7, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rc5-7f']">
         <xsl:call-template name="command-rc5-7f">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rc5-7f' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-rc5-7f">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RC5-7F-57 ################ -->
      <!-- IRP: {57k,msb,889}<1,-1|-1,1>(1,~D:1:5,T:1,D:5,F:7,^114m)*[D:0..63,F:0..127,T@:0..1=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'rc5-7f-57']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: RC5-7F-57
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		14
	flags		RC5|CONST_LENGTH
	eps		30
	aeps		100
	zero		889	889
	one		889	889
	plead		889
	gap		114000
	toggle_bit	2
	frequency	57000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rc5-7f-57">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(true(), false(), $D, 1, 5, false(), false(), $T, 1, 0, false(), false(), $D, 5, 0, false(), false(), $F, 7, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rc5-7f-57']">
         <xsl:call-template name="command-rc5-7f-57">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rc5-7f-57' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-rc5-7f-57">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RC5x ################ -->
      <!-- IRP: {36k,msb,889}<1,-1|-1,1>((1,~S:1:6,T:1,D:5,-4,S:6,F:6,^114m)*,T=1-T)[D:0..31,S:0..127,F:0..63,T@:0..1=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'rc5x']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: RC5x
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		19
	flags		RC5|CONST_LENGTH
	eps		30
	aeps		100
	zero		889	889
	one		889	889
	plead		889
	gap		114000
	toggle_bit	2
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rc5x">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(true(), false(), $S, 1, 6, false(), false(), $T, 1, 0, false(), false(), $D, 5, 0, false(), false(), $S, 6, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rc5x']">
         <xsl:call-template name="command-rc5x">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rc5x' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-rc5x">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RC6 ################ -->
      <!-- IRP: {36k,444,msb}<-1,1|1,-1>((6,-2,1:1,0:3,<-2,2|2,-2>(T:1),D:8,F:8,^107m)*,T=1-T)[D:0..255,F:0..255,T@:0..1=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'rc6']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: RC6
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		21
	flags		RC5|CONST_LENGTH
	eps		30
	aeps		100
	zero		444	444
	one		444	444
	header		2664	888
	gap		107000
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rc6">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 1, 1, 0, false(), false(), 0, 3, 0, false(), false(), $D, 8, 0, false(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rc6']">
         <xsl:call-template name="command-rc6">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rc6' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-rc6">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RC6-6-20 ################ -->
      <!-- IRP: {36k,444,msb}<-1,1|1,-1>((6,-2,1:1,6:3,<-2,2|2,-2>(T:1),D:8,S:4,F:8,-100m)*,T=1-T)[D:0..255,S:0..15,F:0..255,T@:0..1=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'rc6-6-20']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: RC6-6-20
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		25
	flags		RC5
	eps		30
	aeps		100
	zero		444	444
	one		444	444
	header		2664	888
	gap		100000
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rc6-6-20">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 1, 1, 0, false(), false(), 6, 3, 0, false(), false(), $D, 8, 0, false(), false(), $S, 4, 0, false(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rc6-6-20']">
         <xsl:call-template name="command-rc6-6-20">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rc6-6-20' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-rc6-6-20">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RC6-M-32 ################ -->
      <!-- IRP: {36k,444,msb}<-1,1|1,-1>((6,-2,1:1,M:3,<-2,2|2,-2>(T:1),OEM1:8,OEM2:8,D:8,F:8,^107m)*,T=1-T)[OEM1:0..255,OEM2:0..255,D:0..255,F:0..255,M:0..7,T@:0..1=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'rc6-m-32']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: RC6-M-32
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		37
	flags		RC5|CONST_LENGTH
	eps		30
	aeps		100
	zero		444	444
	one		444	444
	header		2664	888
	gap		107000
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rc6-m-32">
         <xsl:param name="OEM1"/>
         <xsl:param name="OEM2"/>
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="M"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 1, 1, 0, false(), false(), $M, 3, 0, false(), false(), $OEM1, 8, 0, false(), false(), $OEM2, 8, 0, false(), false(), $D, 8, 0, false(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rc6-m-32']">
         <xsl:call-template name="command-rc6-m-32">
            <xsl:with-param name="OEM1"
                            select="number(girr:parameters/girr:parameter[@name='OEM1']/@value)"/>
            <xsl:with-param name="OEM2"
                            select="number(girr:parameters/girr:parameter[@name='OEM2']/@value)"/>
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="M"
                            select="number(girr:parameters/girr:parameter[@name='M']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rc6-m-32' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-rc6-m-32">
            <xsl:with-param name="OEM1"
                            select="number(girr:parameters/girr:parameter[@name='OEM1']/@value)"/>
            <xsl:with-param name="OEM2"
                            select="number(girr:parameters/girr:parameter[@name='OEM2']/@value)"/>
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="M"
                            select="number(girr:parameters/girr:parameter[@name='M']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RCA(Old) ################ -->
      <!-- IRP: {58k,460,msb}<1,-2|1,-4>([40][8],-8,D:4,F:8,~D:4,~F:8,2,-16)[D:0..15,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'rca(old)']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: RCA(Old)
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		460	920
	one		460	1840
	header		18400	3680
	ptrail		920
	gap		7360
	frequency	58000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rca-old-">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 4, 0, false(), false(), $F, 8, 0, true(), false(), $D, 4, 0, true(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rca(old)']">
         <xsl:call-template name="command-rca-old-">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RCA ################ -->
      <!-- IRP: {58k,460,msb}<1,-2|1,-4>(8,-8,D:4,F:8,~D:4,~F:8,1,-16)*[D:0..15,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'rca']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: RCA
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		460	920
	one		460	1840
	header		3680	3680
	ptrail		460
	gap		7360
	frequency	58000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rca">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 4, 0, false(), false(), $F, 8, 0, true(), false(), $D, 4, 0, true(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rca']">
         <xsl:call-template name="command-rca">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RCA-38 ################ -->
      <!-- IRP: {38.7k,460,msb}<1,-2|1,-4>(8,-8,D:4,F:8,~D:4,~F:8,1,-16)*[D:0..15,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'rca-38']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: RCA-38
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		460	920
	one		460	1840
	header		3680	3680
	ptrail		460
	gap		7360
	frequency	38700
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rca-38">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 4, 0, false(), false(), $F, 8, 0, true(), false(), $D, 4, 0, true(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rca-38']">
         <xsl:call-template name="command-rca-38">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RCA-38(Old) ################ -->
      <!-- IRP: {38.7k,460,msb}<1,-2|1,-4>([40][8],-8,D:4,F:8,~D:4,~F:8,2,-16)[D:0..15,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'rca-38(old)']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: RCA-38(Old)
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		460	920
	one		460	1840
	header		18400	3680
	ptrail		920
	gap		7360
	frequency	38700
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rca-38-old-">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 4, 0, false(), false(), $F, 8, 0, true(), false(), $D, 4, 0, true(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rca-38(old)']">
         <xsl:call-template name="command-rca-38-old-">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RECS80 ################ -->
      <!-- IRP: {38k,158,msb}<1,-31|1,-47>(1:1,T:1,D:3,F:6,1,-45m)*{}[D:0..7,F:0..63,T@:0..1=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'recs80']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: RECS80
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		11
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		158	4898
	one		158	7426
	ptrail		158
	gap		45000
	toggle_bit	2
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-recs80">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 1, 1, 0, false(), false(), $T, 1, 0, false(), false(), $D, 3, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='recs80']">
         <xsl:call-template name="command-recs80">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='recs80' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-recs80">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RECS80-0045 ################ -->
      <!-- IRP: {38k,158,msb}<1,-31|1,-47>(1:1,T:1,D:3,F:6,1,-45m)*[D:0..7,F:0..63,T@:0..1=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'recs80-0045']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: RECS80-0045
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		11
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		158	4898
	one		158	7426
	ptrail		158
	gap		45000
	toggle_bit	2
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-recs80-0045">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 1, 1, 0, false(), false(), $T, 1, 0, false(), false(), $D, 3, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='recs80-0045']">
         <xsl:call-template name="command-recs80-0045">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='recs80-0045' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-recs80-0045">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RECS80-0068 ################ -->
      <!-- IRP: {33.3k,180,msb}<1,-31|1,-47>(1:1,T:1,D:3,F:6,1,^138m)*[D:0..7,F:0..63,T@:0..1=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'recs80-0068']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: RECS80-0068
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		11
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		180	5580
	one		180	8460
	ptrail		180
	gap		138000
	toggle_bit	2
	frequency	33300
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-recs80-0068">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 1, 1, 0, false(), false(), $T, 1, 0, false(), false(), $D, 3, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='recs80-0068']">
         <xsl:call-template name="command-recs80-0068">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='recs80-0068' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-recs80-0068">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RECS80-0090 ################ -->
      <!-- IRP: {0k,158,msb}<1,-31|1,-47>(1:1,T:1,D:3,F:6,1,^138m)*[D:0..7,F:0..63,T@:0..1=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'recs80-0090']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: RECS80-0090
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		11
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		158	4898
	one		158	7426
	ptrail		158
	gap		138000
	toggle_bit	2
	frequency	0
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-recs80-0090">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 1, 1, 0, false(), false(), $T, 1, 0, false(), false(), $D, 3, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='recs80-0090']">
         <xsl:call-template name="command-recs80-0090">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='recs80-0090' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-recs80-0090">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Replay ################ -->
      <!-- IRP: {36k,444,msb}<-1,1|1,-1>(6,-2,1:1,6:3,<-2,2|2,-2>(T:1),D:8,S:8,F:8,-100m/*???*/)*[D:0..255,S:0..255,F:0..255,T@:0..1=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'replay']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Replay
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		29
	flags		RC5
	eps		30
	aeps		100
	zero		444	444
	one		444	444
	header		2664	888
	gap		100000
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-replay">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 1, 1, 0, false(), false(), 6, 3, 0, false(), false(), $D, 8, 0, false(), false(), $S, 8, 0, false(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='replay']">
         <xsl:call-template name="command-replay">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='replay' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-replay">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Revox ################ -->
      <!-- IRP: {0k,15u}<1,-9|1,-19>(1,-29,0:1,D:4,F:6,1,-29,1,-100285u)*[D:0..15,F:0..63] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'revox']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Revox
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		11
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		15	135
	one		15	285
	header		15	435
	ptrail		15
	gap		100285
	frequency	0
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-revox">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), 0, 1, 0, false(), true(), $D, 4, 0, false(), true(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='revox']">
         <xsl:call-template name="command-revox">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Samsung20 ################ -->
      <!-- IRP: {38.4k,564}<1,-1|1,-3>(8,-8,D:6,S:6,F:8,1,^100m)*[D:0..63,S:0..63,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'samsung20']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Samsung20
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		20
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		4512	4512
	ptrail		564
	gap		100000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-samsung20">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 6, 0, false(), true(), $S, 6, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='samsung20']">
         <xsl:call-template name="command-samsung20">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Samsung36 ################ -->
      <!-- IRP: {37.9k,560,33%}<1,-1|1,-3>(4500u,-4500u,D:8,S:8,1,-9,E:4,F:8,~F:8,1,^108m)*[D:0..255,S:0..255,F:0..255,E:0..15] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'samsung36']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Samsung36
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		36
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		560	560
	one		560	1680
	header		4500	4500
	ptrail		560
	gap		108000
	frequency	37900
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-samsung36">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $E, 4, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='samsung36']">
         <xsl:call-template name="command-samsung36">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Sampo ################ -->
      <!-- IRP: {38.4k,833}<1,-1|1,-3>(4,-4,D:6,F:6,S:6,~F:6,1,-39)*[D:0..63,S:0..63,F:0..63] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'sampo']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Sampo
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		833	833
	one		833	2499
	header		3332	3332
	ptrail		833
	gap		32487
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sampo">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 6, 0, false(), true(), $F, 6, 0, false(), true(), $S, 6, 0, true(), true(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='sampo']">
         <xsl:call-template name="command-sampo">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol ScAtl-6 ################ -->
      <!-- IRP: {57.6k,846}<1,-1|1,-3>(4,-4,D:6,F:6,~D:6,~F:6,1,-40)*[D:0..63,F:0..63] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'scatl-6']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: ScAtl-6
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		846	846
	one		846	2538
	header		3384	3384
	ptrail		846
	gap		33840
	frequency	57600
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-scatl-6">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 6, 0, false(), true(), $F, 6, 0, true(), true(), $D, 6, 0, true(), true(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='scatl-6']">
         <xsl:call-template name="command-scatl-6">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Sharp ################ -->
      <!-- IRP: {38k,264}<1,-3|1,-7>(D:5,F:8,1:2,1,-165,D:5,~F:8,2:2,1,-165)*[D:0..31,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'sharp']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Sharp
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		30
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		264	792
	one		264	1848
	ptrail		264
	gap		43560
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sharp">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 5, 0, false(), true(), $F, 8, 0, false(), true(), 1, 2, 0, false(), true(), $D, 5, 0, true(), true(), $F, 8, 0, false(), true(), 2, 2, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='sharp']">
         <xsl:call-template name="command-sharp">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Sharp{1} ################ -->
      <!-- IRP: {38k,264}<1,-3|1,-7>(D:5,F:8,1:2,1,-165)*[D:0..31,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'sharp{1}']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Sharp{1}
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		15
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		264	792
	one		264	1848
	ptrail		264
	gap		43560
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sharp-1-">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 5, 0, false(), true(), $F, 8, 0, false(), true(), 1, 2, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='sharp{1}']">
         <xsl:call-template name="command-sharp-1-">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Sharp{2} ################ -->
      <!-- IRP: {38k,264}<1,-3|1,-7>(D:5,~F:8,2:2,1,-165)*[D:0..31,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'sharp{2}']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Sharp{2}
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		15
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		264	792
	one		264	1848
	ptrail		264
	gap		43560
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sharp-2-">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 5, 0, true(), true(), $F, 8, 0, false(), true(), 2, 2, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='sharp{2}']">
         <xsl:call-template name="command-sharp-2-">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol SharpDVD omitted: Definitions not yet implemented -->

      <!-- ################## Protocol SIM2 ################ -->
      <!-- IRP: {38.8k,400}<3,-3|3,-7>(6,-7,D:8,F:8,3,-60m)[D:0..255,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'sim2']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: SIM2
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		16
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		1200	1200
	one		1200	2800
	header		2400	2800
	ptrail		1200
	gap		60000
	frequency	38800
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sim2">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='sim2']">
         <xsl:call-template name="command-sim2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol Solidtek16 omitted: Definitions not yet implemented -->
      <!-- Protocol Somfy omitted: Definitions not yet implemented -->

      <!-- ################## Protocol Sony8 ################ -->
      <!-- IRP: {40k,600}<1,-1|2,-1>(4,-1,F:8,^45m)[F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'sony8']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Sony8
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		8
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		600	600
	one		1200	600
	header		2400	600
	gap		45000
	frequency	40000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sony8">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='sony8']">
         <xsl:call-template name="command-sony8">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Sony12 ################ -->
      <!-- IRP: {40k,600}<1,-1|2,-1>(4,-1,F:7,D:5,^45m)*[D:0..31,F:0..127] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'sony12']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Sony12
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		12
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		600	600
	one		1200	600
	header		2400	600
	gap		45000
	frequency	40000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sony12">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 7, 0, false(), true(), $D, 5, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='sony12']">
         <xsl:call-template name="command-sony12">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Sony15 ################ -->
      <!-- IRP: {40k,600}<1,-1|2,-1>(4,-1,F:7,D:8,^45m)*[D:0..255,F:0..127] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'sony15']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Sony15
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		15
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		600	600
	one		1200	600
	header		2400	600
	gap		45000
	frequency	40000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sony15">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 7, 0, false(), true(), $D, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='sony15']">
         <xsl:call-template name="command-sony15">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Sony20 ################ -->
      <!-- IRP: {40k,600}<1,-1|2,-1>(4,-1,F:7,D:5,S:8,^45m)*[D:0..31,S:0..255,F:0..127] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'sony20']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Sony20
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		20
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		600	600
	one		1200	600
	header		2400	600
	gap		45000
	frequency	40000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sony20">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 7, 0, false(), true(), $D, 5, 0, false(), true(), $S, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='sony20']">
         <xsl:call-template name="command-sony20">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol StreamZap ################ -->
      <!-- IRP: {36k,msb,889}<1,-1|-1,1>(1,~F:1:6,T:1,D:6,F:6,^114m)*[D:0..63,F:0..63,T:0..1] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'streamzap']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: StreamZap
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		14
	flags		RC5|CONST_LENGTH
	eps		30
	aeps		100
	zero		889	889
	one		889	889
	plead		889
	gap		114000
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-streamzap">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(true(), false(), $F, 1, 6, false(), false(), $T, 1, 0, false(), false(), $D, 6, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='streamzap']">
         <xsl:call-template name="command-streamzap">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol StreamZap-57 ################ -->
      <!-- IRP: {57k,msb,889}<1,-1|-1,1>(1,~F:1:6,T:1,D:6,F:6,^114m)*[D:0..63,F:0..63,T:0..1] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'streamzap-57']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: StreamZap-57
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		14
	flags		RC5|CONST_LENGTH
	eps		30
	aeps		100
	zero		889	889
	one		889	889
	plead		889
	gap		114000
	frequency	57000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-streamzap-57">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(true(), false(), $F, 1, 6, false(), false(), $T, 1, 0, false(), false(), $D, 6, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='streamzap-57']">
         <xsl:call-template name="command-streamzap-57">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Sunfire ################ -->
      <!-- IRP: {38k,560,msb}<1,-1|3,-1>(16,-8,D:4,F:8,~D:4,~F:8,-32)*[D:0..15,F:0..255] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'sunfire']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Sunfire
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		560	560
	one		1680	560
	header		8960	4480
	gap		17920
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sunfire">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 4, 0, false(), false(), $F, 8, 0, true(), false(), $D, 4, 0, true(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='sunfire']">
         <xsl:call-template name="command-sunfire">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol TDC-38 ################ -->
      <!-- IRP: {38k,315,msb}<-1,1|1,-1>(1,-1,D:5,S:5,F:7,-89m)*[D:0..31,S:0..31,F:0..127] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'tdc-38']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: TDC-38
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		17
	flags		RC5
	eps		30
	aeps		100
	zero		315	315
	one		315	315
	header		315	315
	gap		89000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-tdc-38">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 5, 0, false(), false(), $S, 5, 0, false(), false(), $F, 7, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='tdc-38']">
         <xsl:call-template name="command-tdc-38">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol TDC-56 ################ -->
      <!-- IRP: {56.3k,213,msb}<-1,1|1,-1>(1,-1,D:5,S:5,F:7,-89m)*[D:0..31,S:0..31,F:0..127] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'tdc-56']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: TDC-56
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		17
	flags		RC5
	eps		30
	aeps		100
	zero		213	213
	one		213	213
	header		213	213
	gap		89000
	frequency	56300
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-tdc-56">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 5, 0, false(), false(), $S, 5, 0, false(), false(), $F, 7, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='tdc-56']">
         <xsl:call-template name="command-tdc-56">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol Teac-K omitted: Definitions not yet implemented -->

      <!-- ################## Protocol Thomson ################ -->
      <!-- IRP: {33k,500}<1,-4|1,-9>((D:4,T:1,D:1:4,F:6,1,^80m)*,T=1-T)[D:0..31,F:0..63,T@:0..1=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'thomson']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Thomson
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		12
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		500	2000
	one		500	4500
	ptrail		500
	gap		80000
	toggle_bit	5
	frequency	33000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-thomson">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 4, 0, false(), true(), $T, 1, 0, false(), true(), $D, 1, 4, false(), true(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='thomson']">
         <xsl:call-template name="command-thomson">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='thomson' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-thomson">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Thomson7 ################ -->
      <!-- IRP: {33k,500}<1,-4|1,-9>((D:4,T:1,F:7,1,^80m)*,T=1-T)[D:0..15,F:0..127,T@:0..1=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'thomson7']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Thomson7
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		12
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		500	2000
	one		500	4500
	ptrail		500
	gap		80000
	toggle_bit	5
	frequency	33000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-thomson7">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 4, 0, false(), true(), $T, 1, 0, false(), true(), $F, 7, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='thomson7']">
         <xsl:call-template name="command-thomson7">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='thomson7' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-thomson7">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Tivo ################ -->
      <!-- IRP: {38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,U:4,~F:4:4,1,-78,(16,-4,1,-173)*)[D:133..133=133,S:48..48=48,F:0..255,U:0..15] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'tivo']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Tivo
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		32
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	repeat		9024	2256
	gap		43992
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-tivo">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="U"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, false(), true(), $U, 4, 0, true(), true(), $F, 4, 4)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='tivo']">
         <xsl:call-template name="command-tivo">
            <xsl:with-param name="D" select="133"/>
            <xsl:with-param name="S" select="48"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="U"
                            select="number(girr:parameters/girr:parameter[@name='U']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='tivo' and girr:parameters/girr:parameter[@name='D'] and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-tivo">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="U"
                            select="number(girr:parameters/girr:parameter[@name='U']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Velleman ################ -->
      <!-- IRP: {38k,msb}<700,-5060|700,-7590>(1:1,T:1,D:3,F:6,1,-55m)*[D:0..7,F:0..31,T@:0..1=0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'velleman']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Velleman
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		11
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		700	5060
	one		700	7590
	ptrail		1
	gap		55000
	toggle_bit	2
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-velleman">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 1, 1, 0, false(), false(), $T, 1, 0, false(), false(), $D, 3, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='velleman']">
         <xsl:call-template name="command-velleman">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='velleman' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-velleman">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol Velodyne omitted: Definitions not yet implemented -->

      <!-- ################## Protocol Viewstar ################ -->
      <!-- IRP: {50.5k,337}<1,-8|1,-5>(~F:5,1,-17)*[F:0..31] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'viewstar']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Viewstar
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		5
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		337	2696
	one		337	1685
	ptrail		337
	gap		5729
	frequency	50500
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-viewstar">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(true(), true(), $F, 5, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='viewstar']">
         <xsl:call-template name="command-viewstar">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol X10 ################ -->
      <!-- IRP: {40.8k,565}<2,-12|7,-7>(7,-7,F:5,~F:5,21,-7)*[F:0..31] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'x10']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: X10
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		10
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		1130	6780
	one		3955	3955
	header		3955	3955
	ptrail		11865
	gap		3955
	frequency	40800
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-x10">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 5, 0, true(), true(), $F, 5, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='x10']">
         <xsl:call-template name="command-x10">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol X10.n ################ -->
      <!-- IRP: {40.8k,565}<2,-12|7,-7>(F:5,N:-4,21,-7,(7,-7,F:5,~F:5,21,-7)+)[F:0..31,N:0..15] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'x10.n']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: X10.n
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		19
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		1130	6780
	one		3955	3955
	ptrail		11865
	gap		3955
	frequency	40800
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-x10-n">
         <xsl:param name="F"/>
         <xsl:param name="N"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 5, 0, false(), false(), $N, 4, 0, false(), true(), $F, 5, 0, true(), true(), $F, 5, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='x10.n']">
         <xsl:call-template name="command-x10-n">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="N"
                            select="number(girr:parameters/girr:parameter[@name='N']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol XMPMeta omitted: Definitions not yet implemented -->
      <!-- Protocol XMP omitted: Definitions not yet implemented -->
      <!-- Protocol XMP-1 omitted: Definitions not yet implemented -->
      <!-- Protocol XMP-2 omitted: Definitions not yet implemented -->
      <!-- Protocol XMPff omitted: Definitions not yet implemented -->
      <!-- Protocol XMPff-1 omitted: Definitions not yet implemented -->
      <!-- Protocol XMPff-2 omitted: Definitions not yet implemented -->
      <!-- Protocol Zaptor-36 omitted: Definitions not yet implemented -->
      <!-- Protocol Zaptor-56 omitted: Definitions not yet implemented -->
      <!-- Protocol Zenith omitted: not one of the simple types (pwm2, pwm4, biphase) -->

      <!-- ################## Protocol canon ################ -->
      <!-- IRP: {33k,1}<16p,-240p|16p,-175p>(F:1)2[F:0..1] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'canon']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: canon
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		2
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero	
	one	
	frequency	33000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-canon">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 1, 0, false(), true(), $F, 1, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='canon']">
         <xsl:call-template name="command-canon">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol arctech omitted: Expressions as bitfields not implemented yet -->
      <!-- Protocol arctech-38 omitted: Expressions as bitfields not implemented yet -->
      <!-- Protocol rs200 omitted: Definitions not yet implemented -->
      <!-- Protocol GwtS omitted: not one of the simple types (pwm2, pwm4, biphase) -->

      <!-- ################## Protocol RC6-M-56 ################ -->
      <!-- IRP: {36k,444,msb}<-1,1|1,-1>(6,-2,1:1,M:3,<-2,2|2,-2>(T:1),C:56,-131.0m)*[M:0..7,T@:0..1=0,C:0..72057594037927935] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'rc6-m-56']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: RC6-M-56
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		61
	flags		RC5
	eps		30
	aeps		100
	zero		444	444
	one		444	444
	header		2664	888
	gap		131000
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rc6-m-56">
         <xsl:param name="M"/>
         <xsl:param name="T"/>
         <xsl:param name="C"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 1, 1, 0, false(), false(), $M, 3, 0, false(), false(), $C, 56, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rc6-m-56']">
         <xsl:call-template name="command-rc6-m-56">
            <xsl:with-param name="M"
                            select="number(girr:parameters/girr:parameter[@name='M']/@value)"/>
            <xsl:with-param name="T" select="0"/>
            <xsl:with-param name="C"
                            select="number(girr:parameters/girr:parameter[@name='C']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='rc6-m-56' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-rc6-m-56">
            <xsl:with-param name="M"
                            select="number(girr:parameters/girr:parameter[@name='M']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
            <xsl:with-param name="C"
                            select="number(girr:parameters/girr:parameter[@name='C']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol entone omitted: Definitions not yet implemented -->

      <!-- ################## Protocol Pioneer-Mix ################ -->
      <!-- IRP: {40k,564}<1,-1|1,-3>(16,-8,D0:8,~D0:8,F0:8,~F0:8,1,^108m,(16,-8,D:8,~D:8,F:8,~F:8,1,^108m)+)[D0:0..255,F0:0..255,D:0..255=D0,F:0..255=F0] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'pioneer-mix']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Pioneer-Mix
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		64
	flags		SPACE_ENC|CONST_LENGTH|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		108000
	frequency	40000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-pioneer-mix">
         <xsl:param name="D0"/>
         <xsl:param name="F0"/>
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D0, 8, 0, true(), true(), $D0, 8, 0, false(), true(), $F0, 8, 0, true(), true(), $F0, 8, 0, false(), true(), $D, 8, 0, true(), true(), $D, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='pioneer-mix']">
         <xsl:call-template name="command-pioneer-mix">
            <xsl:with-param name="D0"
                            select="number(girr:parameters/girr:parameter[@name='D0']/@value)"/>
            <xsl:with-param name="F0"
                            select="number(girr:parameters/girr:parameter[@name='F0']/@value)"/>
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D0']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F0']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='pioneer-mix']">
         <xsl:call-template name="command-pioneer-mix">
            <xsl:with-param name="D0"
                            select="number(girr:parameters/girr:parameter[@name='D0']/@value)"/>
            <xsl:with-param name="F0"
                            select="number(girr:parameters/girr:parameter[@name='F0']/@value)"/>
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D0']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F0']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='pioneer-mix' and girr:parameters/girr:parameter[@name='D'] and girr:parameters/girr:parameter[@name='F']]">
         <xsl:call-template name="command-pioneer-mix">
            <xsl:with-param name="D0"
                            select="number(girr:parameters/girr:parameter[@name='D0']/@value)"/>
            <xsl:with-param name="F0"
                            select="number(girr:parameters/girr:parameter[@name='F0']/@value)"/>
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol Fujitsu_Aircon omitted: Definitions not yet implemented -->

      <!-- ################## Protocol Roku-Official ################ -->
      <!-- IRP: {38.0k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:7,0:1,~F:7,1:1,1,^108m,(16,-8,D:8,S:8,F:7,1:1,~F:7,0:1,1,^108m)+)[D:0..255,S:0..255=255-D,F:0..127] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'roku-official']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: Roku-Official
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		64
	flags		SPACE_ENC|CONST_LENGTH|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		108000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-roku-official">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 7, 0, false(), true(), 0, 1, 0, true(), true(), $F, 7, 0, false(), true(), 1, 1, 0, false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 7, 0, false(), true(), 1, 1, 0, true(), true(), $F, 7, 0, false(), true(), 0, 1, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='roku-official']">
         <xsl:call-template name="command-roku-official">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='roku-official']">
         <xsl:call-template name="command-roku-official">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='roku-official' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-roku-official">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Protocol NEC-Shirriff omitted: Variable number of bits -->

      <!-- ################## Protocol NEC-Shirriff-32 ################ -->
      <!-- IRP: {38.4k,msb,564}<1,-1|1,-3>(16,-8,data:32,1,-1)[data:0..UINT32_MAX] -->
      <xsl:template match="girr:commandSet[girr:command/girr:parameters/@protocol = 'nec-shirriff-32']">
         <xsl:text xml:space="preserve">begin remote
	# Protocol name: NEC-Shirriff-32
	name		</xsl:text>
         <xsl:value-of select="translate(../@name, ' ', '_')"/>
         <xsl:text>
	bits		32
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		564
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="//girr:command"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nec-shirriff-32">
         <xsl:param name="data"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $data, 32, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[girr:parameters/@protocol='nec-shirriff-32']">
         <xsl:call-template name="command-nec-shirriff-32">
            <xsl:with-param name="data"
                            select="number(girr:parameters/girr:parameter[@name='data']/@value)"/>
         </xsl:call-template>
      </xsl:template>
   </xsl:stylesheet>
</exportformats:exportformat>
